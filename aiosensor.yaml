substitutions:
  name: "aiosensor"  # lowercase only, have to be unique
  friendly_name: "AIOSensor"  # device name and entity prefix
  version: "1.0.2"
  uart_rx_pin: GPIO20
  uart_tx_pin: GPIO21
  bh1750_update_interval: "5s"
  illuminance_offset: "0"
  bme_address: "0x77"  # for some modules you have to change it to 0x77
  bme_update_interval: 30s
  co2_offset: "0"  # bsec only
  humidity_offset: "0"
  iaq_offset: "0" # bsec only
  pressure_offset: "0"
  temperature_offset: "0"
  voc_offset: "0" # bsec only

esphome:
  name: "${name}"
  comment: BLEProxy LD2410b BH1750 BME680
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: True
  project:
    name: "dincojazz.AIOsensor"
    version: "${version}"
  platformio_options:
    board_build.extra_flags:
      - "-DARDUINO_USB_CDC_ON_BOOT=0"
    board_build.flash_mode: dio
  min_version: 2023.10.0
  on_boot:
    - priority: 100
      then:
        lambda: |-
          id(cpu_speed) = ESP.getCpuFreqMHz();

dashboard_import:
  package_import_url: github://dincojazz/AIOSensor/aiosensor.yaml@main
  import_full_config: true

esp32:
  board: lolin_c3_mini
  variant: ESP32C3
  framework:
    type: arduino

globals:
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: '0'
  - id: last_update_ld2450
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: init_zone_publish
    type: bool
    restore_value: no
    initial_value: "false"
  - id: last_illuminance
    type: float
    restore_value: no
    initial_value: "-1"

# Enable Home Assistant API
api:
  encryption:
    key: "USE YOUR OWN CREATED KEY"

ota:
  password: "USE YOUR OWN CREATED PASSWORD"

safe_mode:
  disabled: false

logger:
#  baud_rate: 0  # disable logging via UART

debug:
  update_interval: 30s

i2c:
  sda: GPIO8
  scl: GPIO9
  scan: true
  id: bus_a

uart:
  tx_pin: "${uart_tx_pin}"
  rx_pin: "${uart_rx_pin}"
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8

time:
  - platform: sntp
    id: time_now

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: FALSE
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret web_server_password
  #output_power: 8.5dBm

captive_portal:

web_server:
  port: 80
  auth:
    username: !secret web_server_user
    password: !secret web_server_password

esp32_ble_tracker:
  scan_parameters:
    active: true

bluetooth_proxy:
  active: true

#esp32_improv:
#  authorizer: none

bme68x_bsec2_i2c:
  address: "${bme_address}"
  model: bme680
  operating_age: 4d
  sample_rate: LP
  supply_voltage: 3.3V

ld2410:

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    entity_category: diagnostic
  - platform: safe_mode
    name: "Restart (Safe Mode)"
    entity_category: diagnostic
  - platform: ld2410
    factory_reset:
      name: "mmWave Factory Reset"
    restart:
      name: "mmWave Restart"
    query_params:
      name: "mmWave Force Refresh"

switch:
  - platform: ld2410
    engineering_mode:
      name: "mmWave Engineering Mode"
    bluetooth:
      name: "mmWave Bluetooth"
  - platform: factory_reset
    name: Factory Reset
    disabled_by_default: True
    icon: mdi:heart-broken

select:
  - platform: ld2410
    distance_resolution:
      name: "mmWave Distance Resolution"
    baud_rate:
      name: "mmWave Baud Tate"
    light_function:
      name: "mmWave Light Function"
    out_pin_level:
      name: "mmWave Out Pin Level"

binary_sensor:
  - platform: status
    name: "Status"
    id: ink_ha_connected
  - platform: template
    name: "Occupancy"
    id: occupancy
    device_class: occupancy
    lambda: |-
      if (id(motion_mmwave).state) {
        return true;
      }
      else if (id(motion_mmwave).state == 0 ) {
        return false;
      }
      else {
        return id(occupancy).state;
      }
  #  lambda: |-
  #    if (id(motion_mmwave).state or id(motion_pir).state) {
  #      return true;
  #    }
  #    else if (id(motion_mmwave).state == 0 and id(motion_pir).state == 0) {
  #      return false;
  #    }
  #    else {
  #      return id(occupancy).state;
  #    }
  - platform: ld2410
    has_target:
      name: "mmWave"
      id: motion_mmwave
    has_moving_target:
      name: "mmWave Moving Target"
    has_still_target:
      name: "mmWave Still Target"
    out_pin_presence_status:
      name: "mmWave out pin presence status"
  - platform: gpio
    pin: GPIO0 #A0
    name: GPIO Out pin presence
    device_class: presence

sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: template
    name: "ESP CPU Speed"
    accuracy_decimals: 0
    icon: mdi:cpu-32-bit
    unit_of_measurement: Mhz
    disabled_by_default: True
    lambda: |-
      return (id(cpu_speed));
    entity_category: "diagnostic"
    update_interval: 600s
  - platform: internal_temperature
    name: "CPU Temperature"
  - platform: template
    id: sys_esp_temperature
    name: ESP Temperature
    lambda: return temperatureRead();
    unit_of_measurement: °C
    device_class: TEMPERATURE
    update_interval: 45s
    entity_category: "diagnostic"
  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"
    update_interval: 60s
  - platform: uptime
    name: ESP Uptime
    id: sys_uptime
    update_interval: 60s
  - platform: bh1750
    id: illuminance_sensor
    name: "Illuminance"
    address: 0x23
    update_interval: "${bh1750_update_interval}"
    filters:
      - offset: ${illuminance_offset}
      - lambda: "return x + id(illuminance_offset_ui).state;"
  - platform: bme68x_bsec2
    temperature:
      name: "Temperature"
      accuracy_decimals: 2
      filters:
        - offset: ${temperature_offset}
        - lambda: "return x + id(temperature_offset_ui).state;"
    pressure:
      name: "Pressure"
      device_class: atmospheric_pressure
      filters:
        - offset: ${pressure_offset}
        - lambda: "return x + id(pressure_offset_ui).state;"
    humidity:
      name: "Humidity"
      accuracy_decimals: 2
      filters:
        - offset: ${humidity_offset}
        - lambda: "return x + id(humidity_offset_ui).state;"
    gas_resistance:
      name: "Gas Resistance"
      id: gasresistance
      filters:
        - median
    iaq:
      name: "IAQ"
      id: iaq
      device_class: aqi
      filters:
        - offset: ${iaq_offset}
        - lambda: "return x + id(iaq_offset_ui).state;"
    iaq_accuracy:
      name: "IAQ Accuracy"
      id: iaqaccuracy
    iaq_static:
      name: "IAQ Static"
      id: iaqstatic
    co2_equivalent:
      name: "CO2 Equivalent"
      device_class: carbon_dioxide
      filters:
        - offset: ${co2_offset}
        - lambda: "return x + id(co2_offset_ui).state;"
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      device_class: volatile_organic_compounds
      filters:
        - offset: ${voc_offset}
        - lambda: "return x + id(voc_offset_ui).state;"
  - platform: ld2410
    light:
      name: light
    moving_distance:
      name: "mmWave Moving Distance"
    still_distance:
      name: "mmWave Still Distance"
    moving_energy:
      name: "mmWave Move Energy"
    still_energy:
      name: "mmWave Still Energy"
    detection_distance:
      name: "mmWave Detection Distance"
    g0:
      move_energy:
        name: "mmWave g0 move energy"
      still_energy:
        name: "mmWave g0 still energy"
    g1:
      move_energy:
        name: "mmWave g1 move energy"
      still_energy:
        name: "mmWave g1 still energy"
    g2:
      move_energy:
        name: "mmWave g2 move energy"
      still_energy:
        name: "mmWave g2 still energy"
    g3:
      move_energy:
        name: "mmWave g3 move energy"
      still_energy:
        name: "mmWave g3 still energy"
    g4:
      move_energy:
        name: "mmWave g4 move energy"
      still_energy:
        name: "mmWave g4 still energy"
    g5:
      move_energy:
        name: "mmWave g5 move energy"
      still_energy:
        name: "mmWave g5 still energy"
    g6:
      move_energy:
        name: "mmWave g6 move energy"
      still_energy:
        name: "mmWave g6 still energy"
    g7:
      move_energy:
        name: "mmWave g7 move energy"
      still_energy:
        name: "mmWave g7 still energy"
    g8:
      move_energy:
        name: "mmWave g8 move energy"
      still_energy:
        name: "mmWave g8 still energy"

number:
  - platform: template
    name: "Illuminance Offset"
    id: illuminance_offset_ui
    unit_of_measurement: "lx"
    min_value: -100
    max_value: 100
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:brightness-5"
    entity_category: config
    on_value:
      - lambda: 'id(illuminance_sensor).update();'
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset_ui
    unit_of_measurement: "°C"
    min_value: -25
    max_value: 25
    step: 0.01
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:thermometer"
    entity_category: config
  - platform: template
    name: "Humidity Offset"
    id: humidity_offset_ui
    unit_of_measurement: "%"
    min_value: -50
    max_value: 50
    step: 0.01
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:water-percent"
    entity_category: config
  - platform: template
    name: "Pressure Offset"
    id: pressure_offset_ui
    unit_of_measurement: "hPa"
    min_value: -500
    max_value: 500
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:gauge"
    entity_category: config
  - platform: template
    name: "CO2 Offset"
    id: co2_offset_ui
    unit_of_measurement: "ppm"
    min_value: -1000
    max_value: 1000
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:test-tube"
    entity_category: config
  - platform: template
    name: "VOC Offset"
    id: voc_offset_ui
    unit_of_measurement: "ppm"
    min_value: -1000
    max_value: 1000
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:test-tube"
    entity_category: config
  - platform: template
    name: "IAQ Offset"
    id: iaq_offset_ui
    unit_of_measurement: "IAQ"
    min_value: -400
    max_value: 400
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:gauge"
    entity_category: config
  - platform: ld2410
    timeout:
      name: "mmWave Timeout"
    light_threshold:
      name: "mmWave Light Threshold"
    max_move_distance_gate:
      name: "mmWave Max Move Distance Gate"
    max_still_distance_gate:
      name: "mmWave Max Still Distance Gate"
    g0:
      move_threshold:
        name: "mmWave g0 move threshold"
      still_threshold:
        name: "mmWave g0 still threshold"
    g1:
      move_threshold:
        name: "mmWave g1 move threshold"
      still_threshold:
        name: "mmWave g1 still threshold"
    g2:
      move_threshold:
        name: "mmWave g2 move threshold"
      still_threshold:
        name: "mmWave g2 still threshold"
    g3:
      move_threshold:
        name: "mmWave g3 move threshold"
      still_threshold:
        name: "mmWave g3 still threshold"
    g4:
      move_threshold:
        name: "mmWave g4 move threshold"
      still_threshold:
        name: "mmWave g4 still threshold"
    g5:
      move_threshold:
        name: "mmWave g5 move threshold"
      still_threshold:
        name: "mmWave g5 still threshold"
    g6:
      move_threshold:
        name: "mmWave g6 move threshold"
      still_threshold:
        name: "mmWave g6 still threshold"
    g7:
      move_threshold:
        name: "mmWave g7 move threshold"
      still_threshold:
        name: "mmWave g7 still threshold"
    g8:
      move_threshold:
        name: "mmWave g8 move threshold"
      still_threshold:
        name: "mmWave g8 still threshold"

text_sensor:
  - platform: bme68x_bsec2
    iaq_accuracy:
      name: "IAQ Accuracy"
      icon: mdi:checkbox-marked-circle-outline
      id: iaq_accuracy
  - platform: template
    name: "IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }
  - platform: ld2410
    version:
      name: "mmWave Firmware Version"
    mac_address:
      name: "mmWave Mac Address"
  - platform: debug
    reset_reason:
      name: "ESP Reset Reason"
      icon: mdi:anchor
      disabled_by_default: True
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      entity_category: "diagnostic"
      disabled_by_default: True
      icon: mdi:ip-network
    mac_address:
      name: ESP MAC
      entity_category: "diagnostic"
      icon: mdi:ip-network
      disabled_by_default: True
